/*
 * Filename: f:\Projects\Mocha\content\shaders\pbr.mshdr
 * Path: f:\Projects\Mocha\content\shaders
 * Created Date: Monday, June 13th 2022, 1:26:52 pm
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */

//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout( set = 0, binding = 0 ) uniform texture2D g_tDiffuse;
layout( set = 0, binding = 1 ) uniform texture2D g_tSpecular;
layout( set = 0, binding = 2 ) uniform texture2D g_tNormal;
layout( set = 0, binding = 3 ) uniform texture2D g_tEmissive;
layout( set = 0, binding = 4 ) uniform texture2D g_tORM;
layout( set = 0, binding = 5 ) uniform sampler g_sSampler;
layout( set = 0, binding = 6 ) uniform ObjectUniformBuffer {
    mat4 g_mModel;
    mat4 g_mView;
    mat4 g_mProj;

    vec3 g_vLightPos;
    vec3 g_vLightColor;
    vec3 g_vCameraPos;
} g_oUbo;

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec3 normal;
layout( location = 2 ) in vec2 texCoords;
layout( location = 3 ) in vec3 tangent;
layout( location = 4 ) in vec3 bitangent;

//
// Out
//
layout( location = 0 ) out struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vPositionWS;

    vec3 vLightPosTS;
    vec3 vCameraPosTS;
    vec3 vPositionTS;
} vs_out;

void main() {
    mat3 modelNormalMatrix = transpose( inverse( mat3( g_oUbo.g_mModel ) ) );
    vec3 T = normalize( modelNormalMatrix * tangent );
    vec3 N = normalize( modelNormalMatrix * normal );
    T = normalize( T - dot( T, N ) * N );

    vec3 B = cross( N, T );
    mat3 TBN = mat3( T, B, N );

    vs_out.vPositionWS = vec3( g_oUbo.g_mModel * vec4( position, 1.0 ) );
    vs_out.vTexCoords = texCoords;
    vs_out.vNormal = normal;

    vs_out.vLightPosTS = TBN * g_oUbo.g_vLightPos;
    vs_out.vCameraPosTS = TBN * g_oUbo.g_vCameraPos;
    vs_out.vPositionTS = TBN * vs_out.vPositionWS;
   
    vec4 pos = g_oUbo.g_mModel * vec4( position, 1.0 );
    gl_Position = g_oUbo.g_mProj * g_oUbo.g_mView * pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vPositionWS;

    vec3 vLightPosTS;
    vec3 vCameraPosTS;
    vec3 vPositionTS;
} vs_out;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;


// PBR calculations
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return a2 / max(denom, 0.001);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float denom = NdotV * (1.0 - k) + k;
    return NdotV / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);

    return ggx1 * ggx2;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 GetNormalFromNormalMap()
{
    vec3 tangentNormal = texture( sampler2D( g_tNormal, g_sSampler ), vs_out.vTexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(vs_out.vPositionWS);
    vec3 Q2  = dFdy(vs_out.vPositionWS);
    vec2 st1 = dFdx(vs_out.vTexCoords);
    vec2 st2 = dFdy(vs_out.vTexCoords);

    vec3 N   = normalize(vs_out.vNormal);
    vec3 T   = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B   = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

void main() 
{
    //
    // Material properties
    //
    vec4 albedoSrc = texture( sampler2D( g_tDiffuse, g_sSampler ), vs_out.vTexCoords );
    vec3 albedo = albedoSrc.xyz;

    float ao = texture(sampler2D( g_tORM, g_sSampler ), vs_out.vTexCoords).x;
    float roughness = texture(sampler2D( g_tORM, g_sSampler ), vs_out.vTexCoords).y;
    float metallic = texture(sampler2D( g_tORM, g_sSampler ), vs_out.vTexCoords).z;

    //
    // TODO: Handle missing normal maps
    vec3 N = GetNormalFromNormalMap();
    vec3 V = normalize(g_oUbo.g_vCameraPos - vs_out.vPositionWS);
    vec3 R = reflect(-V, N);

    // Calculate reflectance at normal incidence
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    // Reflectance equation
    vec3 Lo = vec3(0.0);
    {
        // Calculate per-light radiance
        vec3 L = normalize(g_oUbo.g_vLightPos - vs_out.vPositionWS);
        vec3 H = normalize(V + L);
        float distance = length(g_oUbo.g_vLightPos - vs_out.vPositionWS);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = vec3(23.47, 21.31, 20.79) * attenuation;

        // Cook-torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);
        float G = GeometrySmith(N, V, L, roughness);
        vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular = numerator / denominator;

        // kS is equal to fresnel
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        // Scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);

        // Add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * NdotL;
    }

    // Ambient lighting
    vec3 F = FresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;

    vec3 diffuse = albedo;

    vec3 specular = vec3( 0.0 );
    vec3 ambient = (kD * diffuse + specular) * ao;
    vec3 color = Lo + ambient;

    fragColor = vec4( color, 1.0 );
}
#endif
// ==========================================================================================================================