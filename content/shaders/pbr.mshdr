/*
 * Filename: f:\Projects\Mocha\content\shaders\pbr.mshdr
 * Path: f:\Projects\Mocha\content\shaders
 * Created Date: Monday, June 13th 2022, 1:26:52 pm
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */
#pragma optionNV (unroll all)
//
// Common
//
#define PI 3.14159

//
// Uniforms
//
// Object
layout( set = 0, binding = 0 ) uniform texture2D g_tDiffuse;
layout( set = 0, binding = 1 ) uniform texture2D g_tAlpha;
layout( set = 0, binding = 2 ) uniform texture2D g_tNormal;
layout( set = 0, binding = 3 ) uniform texture2D g_tORM;
layout( set = 0, binding = 4 ) uniform sampler g_sSampler;
layout( set = 0, binding = 5 ) uniform ObjectUniformBuffer {
    mat4 g_mModel;
    mat4 g_mViewProj;
    mat4 g_mPadding;
    mat4 g_mLightViewProj;

    vec3 g_vSunLightDir;
    float g_flTime;

    vec3 g_vLightPos;
    float g_vSunLightIntensity;

    vec3 g_vCameraPos;
    // float pad

    vec3 g_vLightColor;
    // float pad

    vec4 g_vSunLightColor;
} g_oUbo;

// Lighting
layout( set = 1, binding = 0 ) uniform texture2D g_tShadowMap;
layout( set = 1, binding = 1 ) uniform texture2D g_tShadowPosition;
layout( set = 1, binding = 2 ) uniform texture2D g_tShadowNormal;
layout( set = 1, binding = 3 ) uniform texture2D g_tShadowFlux;
layout( set = 1, binding = 4 ) uniform sampler g_sShadowSampler;

struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vTangent;
    vec3 vPositionWS;
    vec3 vNormalWS;

    mat3 TBN;

    vec3 vLightPosTS;
    vec3 vCameraPosTS;
    vec3 vPositionTS;

    vec4 vFragPosLightSpace;
};

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec3 normal;
layout( location = 2 ) in vec2 texCoords;
layout( location = 3 ) in vec3 tangent;
layout( location = 4 ) in vec3 bitangent;

//
// Out
//
layout( location = 0 ) out VS_OUT vs_out;

void main() {
    vec3 T = normalize( vec3( g_oUbo.g_mModel * vec4( tangent, 1.0 ) ) );
    vec3 B = normalize( vec3( g_oUbo.g_mModel * vec4( bitangent, 1.0 ) ) );
    vec3 N = normalize( vec3( g_oUbo.g_mModel * vec4( normal, 1.0 ) ) );
    mat3 TBN = mat3( T, B, N );

    vs_out.vPositionWS = vec3( g_oUbo.g_mModel * vec4( position, 1.0 ) );
    vs_out.vNormalWS = vec3( g_oUbo.g_mModel * vec4( normal, 1.0 ) );
    vs_out.vNormalWS = normalize( vs_out.vNormalWS );
    
    vs_out.vTexCoords = texCoords;
    vs_out.vNormal = normal;
    vs_out.vTangent = tangent;

    vs_out.vLightPosTS = TBN * g_oUbo.g_vLightPos;
    vs_out.vCameraPosTS = TBN * g_oUbo.g_vCameraPos;
    vs_out.vPositionTS = TBN * vs_out.vPositionWS;

    vs_out.TBN = TBN;

    vs_out.vFragPosLightSpace = g_oUbo.g_mLightViewProj * vec4( vs_out.vPositionWS, 1.0 );
   
    vec4 pos = g_oUbo.g_mModel * vec4( position, 1.0 );
    gl_Position = g_oUbo.g_mViewProj * pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in VS_OUT fs_in;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;

vec3 GetTextureSample( texture2D tex )
{
    return texture( sampler2D( tex, g_sSampler ), fs_in.vTexCoords ).xyz;
}

float Luminance(vec3 v)
{
    return dot(v, vec3(0.2126, 0.7152, 0.0722));
}

vec3 ReinhardJodie(vec3 v)
{
    float l = Luminance(v);
    vec3 tv = v / (1.0 + v);
    return mix(v / (1.0 + l), tv, tv);
}

vec3 GetShadowProjCoords( vec4 fragPosLightSpace )
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    
    projCoords.y = -projCoords.y;
    projCoords.xy = projCoords.xy * 0.5 + 0.5;

    return projCoords;
}

float ShadowCalculation( vec4 fragPosLightSpace )
{
    const float bias = 0.0022;

    vec3 projCoords = GetShadowProjCoords( fragPosLightSpace );

    if ( projCoords.z > 1.0 )
        return 0.0;
        
    float currentDepth = projCoords.z;
    
    float shadow = 0.0;
    vec2 scale = vec2( 1.0 / 16384 );
    int sampleRes = 4;

    // We can implement high-performance PCF using fetch4
    
    vec4 pcfDepth = textureGather( sampler2D( g_tShadowMap, g_sShadowSampler ), projCoords.xy );

    shadow += currentDepth - bias > pcfDepth.x ? 0.0 : 1.0;
    shadow += currentDepth - bias > pcfDepth.y ? 0.0 : 1.0;
    shadow += currentDepth - bias > pcfDepth.z ? 0.0 : 1.0;
    shadow += currentDepth - bias > pcfDepth.w ? 0.0 : 1.0;

    shadow /= 4.0;

    return min( max( shadow, 0.0 ), 1.0 );
}

vec2 rsmSamplesSlow[] = vec2[] (vec2(0, 0),vec2(0, 0.1),vec2(0, 0.2),vec2(0, 0.3),vec2(0, 0.4),vec2(0, 0.5),vec2(0, 0.6),vec2(0, 0.7),vec2(0, 0.8),vec2(0, 0.9),vec2(0, 1),vec2(0.1, 0),vec2(0.1, 0.1),vec2(0.1, 0.2),vec2(0.1, 0.3),vec2(0.1, 0.4),vec2(0.1, 0.5),vec2(0.1, 0.6),vec2(0.1, 0.7),vec2(0.1, 0.8),vec2(0.1, 0.9),vec2(0.1, 1),vec2(0.2, 0),vec2(0.2, 0.1),vec2(0.2, 0.2),vec2(0.2, 0.3),vec2(0.2, 0.4),vec2(0.2, 0.5),vec2(0.2, 0.6),vec2(0.2, 0.7),vec2(0.2, 0.8),vec2(0.2, 0.9),vec2(0.2, 1),vec2(0.3, 0),vec2(0.3, 0.1),vec2(0.3, 0.2),vec2(0.3, 0.3),vec2(0.3, 0.4),vec2(0.3, 0.5),vec2(0.3, 0.6),vec2(0.3, 0.7),vec2(0.3, 0.8),vec2(0.3, 0.9),vec2(0.3, 1),vec2(0.4, 0),vec2(0.4, 0.1),vec2(0.4, 0.2),vec2(0.4, 0.3),vec2(0.4, 0.4),vec2(0.4, 0.5),vec2(0.4, 0.6),vec2(0.4, 0.7),vec2(0.4, 0.8),vec2(0.4, 0.9),vec2(0.4, 1),vec2(0.5, 0),vec2(0.5, 0.1),vec2(0.5, 0.2),vec2(0.5, 0.3),vec2(0.5, 0.4),vec2(0.5, 0.5),vec2(0.5, 0.6),vec2(0.5, 0.7),vec2(0.5, 0.8),vec2(0.5, 0.9),vec2(0.5, 1),vec2(0.6, 0),vec2(0.6, 0.1),vec2(0.6, 0.2),vec2(0.6, 0.3),vec2(0.6, 0.4),vec2(0.6, 0.5),vec2(0.6, 0.6),vec2(0.6, 0.7),vec2(0.6, 0.8),vec2(0.6, 0.9),vec2(0.6, 1),vec2(0.7, 0),vec2(0.7, 0.1),vec2(0.7, 0.2),vec2(0.7, 0.3),vec2(0.7, 0.4),vec2(0.7, 0.5),vec2(0.7, 0.6),vec2(0.7, 0.7),vec2(0.7, 0.8),vec2(0.7, 0.9),vec2(0.7, 1),vec2(0.8, 0),vec2(0.8, 0.1),vec2(0.8, 0.2),vec2(0.8, 0.3),vec2(0.8, 0.4),vec2(0.8, 0.5),vec2(0.8, 0.6),vec2(0.8, 0.7),vec2(0.8, 0.8),vec2(0.8, 0.9),vec2(0.8, 1),vec2(0.9, 0),vec2(0.9, 0.1),vec2(0.9, 0.2),vec2(0.9, 0.3),vec2(0.9, 0.4),vec2(0.9, 0.5),vec2(0.9, 0.6),vec2(0.9, 0.7),vec2(0.9, 0.8),vec2(0.9, 0.9),vec2(0.9, 1),vec2(1, 0),vec2(1, 0.1),vec2(1, 0.2),vec2(1, 0.3),vec2(1, 0.4),vec2(1, 0.5),vec2(1, 0.6),vec2(1, 0.7),vec2(1, 0.8),vec2(1, 0.9),vec2(1, 1));
vec2 rsmSamplesFast[] = vec2[] ( vec2( 0, 0 ), vec2( 0, 0.2 ), vec2( 0, 0.4 ), vec2( 0, 0.6 ), vec2( 0, 0.8 ), vec2( 0, 1 ), vec2( 0.2, 0 ), vec2( 0.2, 0.2 ), vec2( 0.2, 0.4 ), vec2( 0.2, 0.6 ), vec2( 0.2, 0.8 ), vec2( 0.2, 1 ), vec2( 0.4, 0 ), vec2( 0.4, 0.2 ), vec2( 0.4, 0.4 ), vec2( 0.4, 0.6 ), vec2( 0.4, 0.8 ), vec2( 0.4, 1 ), vec2( 0.6, 0 ), vec2( 0.6, 0.2 ), vec2( 0.6, 0.4 ), vec2( 0.6, 0.6 ), vec2( 0.6, 0.8 ), vec2( 0.6, 1 ), vec2( 0.8, 0 ), vec2( 0.8, 0.2 ), vec2( 0.8, 0.4 ), vec2( 0.8, 0.6 ), vec2( 0.8, 0.8 ), vec2( 0.8, 1 ), vec2( 1, 0 ), vec2( 1, 0.2 ), vec2( 1, 0.4 ), vec2( 1, 0.6 ), vec2( 1, 0.8 ), vec2( 1, 1 ) );
vec2 poissonDisk[16] = vec2[] (
    vec2(-0.94201624,    -0.39906216), 
    vec2(0.94558609,     -0.76890725), 
    vec2(-0.094184101,    -0.92938870), 
    vec2(0.34495938,     0.29387760), 
    vec2(-0.91588581,    0.45771432), 
    vec2(-0.81544232,    -0.87912464), 
    vec2(-0.38277543,    0.27676845), 
    vec2(0.97484398,     0.75648379), 
    vec2(0.44323325,     -0.97511554), 
    vec2(0.53742981,     -0.47373420), 
    vec2(-0.26496911,    -0.41893023), 
    vec2(0.79197514,     0.19090188), 
    vec2(-0.24188840,    0.99706507), 
    vec2(-0.81409955,    0.91437590), 
    vec2(0.19984126,     0.78641367), 
    vec2(0.14383161,     -0.14100790)
);

#define rsmSamples rsmSamplesSlow
#define rsmRadius 0.0075

vec3 GetAmbient( vec4 fragPosLightSpace )
{
    vec3 projCoords = GetShadowProjCoords( fragPosLightSpace );
    vec3 ambient = vec3( 0.0 );

    for ( int i = 0; i < rsmSamples.length(); ++i )
    {
        vec2 rnd = rsmSamples[i].xy;

        vec2 coords = projCoords.xy + rnd * rsmRadius;

        vec3 vplPositionWS = texture( sampler2D( g_tShadowPosition, g_sShadowSampler ), coords.xy ).rgb;
        vec3 vplNormalWS = texture( sampler2D( g_tShadowNormal, g_sShadowSampler ), coords.xy ).rgb;
        vec3 flux = texture( sampler2D( g_tShadowFlux, g_sShadowSampler ), coords.xy ).rgb;

        float lightContrib =     max( 0, dot( vplNormalWS, fs_in.vPositionWS - vplPositionWS )) 
                                 // * max( 0, dot( fs_in.vNormalWS, vplPositionWS - fs_in.vPositionWS ))
                                 / pow( length( fs_in.vPositionWS - vplPositionWS ), 4 );
        
        float dist = length( rnd );
        lightContrib *= dist * dist;

        ambient += lightContrib * vec3( 1.0 );
    }

    return ambient * 1000;
}

void main() 
{
    // Obtain normal from normal map in range [0,1]
    vec3 normal = GetTextureSample( g_tNormal );

    // Transform normal vector to range [-1, 1]
    normal = normal * 2.0 - 1.0;
    normal.y = -normal.y;

    // Transform normal vector into tangent space
    normal = normalize( fs_in.TBN * normal );

    // Get diffuse color
    vec3 color = pow( GetTextureSample( g_tDiffuse ), vec3( 2.2 ) );
    
    // Ambient
    vec3 ambient = 0.01 * color;

    // Diffuse
    vec3 lightDir = normalize( g_oUbo.g_vSunLightDir );
    float diff = max( dot( lightDir, normal ), 0.0 );
    vec3 diffuse = diff * color;

    // Get metalness
    float metalness = 1.0 - GetTextureSample( g_tORM ).b;
    float specularPower = metalness * 32.0 + 32.0;
    
    // Specular
    vec3 viewDir = normalize( g_oUbo.g_vCameraPos - fs_in.vPositionWS );
    vec3 reflectDir = reflect( -lightDir, normal );
    vec3 halfwayDir = normalize( lightDir + viewDir );
    float spec = pow( max( dot( normal, halfwayDir ), 0.0 ), specularPower );

    // Get roughness
    float roughness = GetTextureSample( g_tORM ).g;
    vec3 specular = vec3( roughness ) * spec;

    // Shadow
    float shadow = ShadowCalculation( fs_in.vFragPosLightSpace );
    
    // Mix lighting
    vec3 lighting = (diffuse + specular) * g_oUbo.g_vSunLightColor.xyz;
    fragColor = vec4( ambient + ( shadow * lighting ), 1.0 );

    // Occlusion
    // float occlusion = GetTextureSample( g_tORM ).b;
    // fragColor = vec4( fragColor.rgb * occlusion, 1.0 );
    
    // Reinhard-Jodie tone mapping
    fragColor.xyz = ReinhardJodie( fragColor.xyz );
    // fragColor.xyz *= pow( 2, 0.5 );

    // Gamma correction
    fragColor.xyz = 1.0 - exp( -4.0 * fragColor.xyz );
    fragColor.rgb = pow( fragColor.rgb, 1 / vec3( 2.2 ) );
}
#endif
// ==========================================================================================================================