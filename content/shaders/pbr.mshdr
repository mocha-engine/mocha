/*
 * Filename: f:\Projects\Mocha\content\shaders\pbr.mshdr
 * Path: f:\Projects\Mocha\content\shaders
 * Created Date: Monday, June 13th 2022, 1:26:52 pm
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */

//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout( set = 0, binding = 0 ) uniform texture2D g_tDiffuse;
layout( set = 0, binding = 1 ) uniform texture2D g_tSpecular;
layout( set = 0, binding = 2 ) uniform texture2D g_tNormal;
layout( set = 0, binding = 3 ) uniform texture2D g_tEmissive;
layout( set = 0, binding = 4 ) uniform texture2D g_tORM;
layout( set = 0, binding = 5 ) uniform sampler g_sSampler;
layout( set = 0, binding = 6 ) uniform ObjectUniformBuffer {
    mat4 g_mModel;
    mat4 g_mView;
    mat4 g_mProj;

    vec3 g_vLightPos;
    vec3 g_vLightColor;
    vec3 g_vCameraPos;
} g_oUbo;

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec3 normal;
layout( location = 2 ) in vec2 texCoords;
layout( location = 3 ) in vec3 tangent;
layout( location = 4 ) in vec3 bitangent;

//
// Out
//
layout( location = 0 ) out struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vTangent;
    vec3 vPositionWS;

    vec3 vLightPosTS;
    vec3 vCameraPosTS;
    vec3 vPositionTS;
} vs_out;

void main() {
    mat3 modelNormalMatrix = transpose( inverse( mat3( g_oUbo.g_mModel ) ) );
    vec3 T = normalize( modelNormalMatrix * tangent );
    vec3 N = normalize( modelNormalMatrix * normal );
    T = normalize( T - dot( T, N ) * N );
    vec3 B = cross( N, T );

    mat3 TBN = mat3( T, B, N );

    vs_out.vPositionWS = vec3( g_oUbo.g_mModel * vec4( position, 1.0 ) );
    vs_out.vTexCoords = texCoords;
    vs_out.vNormal = normal;
    vs_out.vTangent = tangent;

    vs_out.vLightPosTS = TBN * g_oUbo.g_vLightPos;
    vs_out.vCameraPosTS = TBN * g_oUbo.g_vCameraPos;
    vs_out.vPositionTS = TBN * vs_out.vPositionWS;
   
    vec4 pos = g_oUbo.g_mModel * vec4( position, 1.0 );
    gl_Position = g_oUbo.g_mProj * g_oUbo.g_mView * pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vTangent;
    vec3 vPositionWS;

    vec3 vLightPosTS;
    vec3 vCameraPosTS;
    vec3 vPositionTS;
} vs_out;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;

float GetAmbient()
{
    return 0.0;
}

float GetDiffuse( vec3 norm )
{
    vec3 lightDir = normalize( vs_out.vLightPosTS - vs_out.vPositionTS );

    float diffuse = max( dot( norm, lightDir ), 0.0 );
    return diffuse;
}

float GetSpecular( vec3 norm )
{
    float strength = 1.0;
    vec3 viewDir = normalize( vs_out.vCameraPosTS - vs_out.vPositionTS );
    vec3 lightDir = normalize( vs_out.vLightPosTS - vs_out.vPositionTS );
    vec3 reflectDir = reflect( -lightDir, norm );
    vec3 halfwayDir = normalize( lightDir + viewDir );

    float spec = pow( max( dot( norm, halfwayDir ), 0.0 ), 32 );
    return spec * strength;
}

void main() 
{
    vec3 normal = texture( sampler2D( g_tNormal, g_sSampler ), vs_out.vTexCoords ).xyz;

    // calculate blue/Z channel
    vec2 normalXY = normal.xy;
    normalXY = normalize( normalXY * 2.0 - 1.0 ); // transform normal vector to range [-1, 1]
    float normalZ = sqrt( clamp( 1.0 - dot( normalXY, normalXY ), 0.0, 1.0 ) );

    normal = vec3( normalXY.x, normalXY.y, normalZ );
    
    vec3 albedo = texture( sampler2D( g_tDiffuse, g_sSampler ), vs_out.vTexCoords ).xyz;
    vec3 color = ( GetAmbient() + GetDiffuse( normal ) + GetSpecular( normal ) ) * albedo;

    fragColor = vec4( color, 1.0 );
}
#endif
// ==========================================================================================================================