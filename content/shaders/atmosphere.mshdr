/*
 * Filename: f:\Projects\Mocha\content\shaders\atmosphere.mshdr
 * Path: f:\Projects\Mocha\content\shaders
 * Created Date: Monday, June 13th 2022, 2:27:22 am
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */

//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout( set = 0, binding = 5 ) uniform ObjectUniformBuffer {
    mat4 g_mModel;
    mat4 g_mView;
    mat4 g_mProj;

    vec3 g_vLightPos;
    float g_flTime;

    vec4 g_vLightColor;

    vec3 g_vCameraPos;
    float g_flPlanetRadius;
    
    vec3 g_vSunPos;
    float g_flAtmosphereRadius;

    float g_flSunIntensity;
} g_oUbo;

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec3 normal;
layout( location = 2 ) in vec2 texCoords;

//
// Out
//
layout( location = 0 ) out struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vPosition;
} vs_out;

void main() {
    vs_out.vTexCoords = texCoords;
    vs_out.vNormal = normal;
    vs_out.vPosition = position;

    mat4 rotView = mat4( mat3( g_oUbo.g_mView ) ); // Stamp out position
    vec4 pos = g_oUbo.g_mModel * vec4( position, 1.0 );
    vec4 clipPos = g_oUbo.g_mProj * rotView * pos;
    gl_Position = clipPos.xyww; // Depth trick, requires LessEqual depth test
}

#endif
// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in struct VS_OUT {
    vec2 vTexCoords;
    vec3 vNormal;
    vec3 vPosition;
} vs_out;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;

#define iSteps 4
#define jSteps 2

vec2 RaySphereIntersect(vec3 radius, vec3 rd, float sr)
{
    float a = 1.0;
    float b = 2.0 * dot(rd, radius);
    float c = dot(radius, radius) - (sr * sr);
    float d = (b*b) - 4.0*a*c;

    if (d < 0.0)
        return vec2(1e5,-1e5);
    
    return vec2(
        (-b - sqrt(d))/(2.0*a),
        (-b + sqrt(d))/(2.0*a)
    );
}

vec3 atmosphere(vec3 r, vec3 r0, vec3 pSun, float iSun, float rPlanet, float rAtmos, float shRlh, float shMie) {
    // Normalize the sun and view directions.
    pSun = normalize(pSun);
    r = normalize(r);

    vec3 kRlh = vec3(0.0000055, 0.0000117891, 0.0000244460);
    float kMie = 0.000021;
    float g = 0.75;

    // Calculate the step size of the primary ray.
    vec2 p = RaySphereIntersect(r0, r, rAtmos);
    p.y = min(p.y, RaySphereIntersect(r0, r, rPlanet).x);

    float iStepSize = (p.y - p.x) / float(iSteps);

    // Initialize the primary ray time.
    float iTime = 0.0;

    // Initialize accumulators for Rayleigh and Mie scattering.
    vec3 totalRlh = vec3(0,0,0);
    vec3 totalMie = vec3(0,0,0);

    // Initialize optical depth accumulators for the primary ray.
    float iOdRlh = 0.0;
    float iOdMie = 0.0;

    // Calculate the Rayleigh and Mie phases.
    float mu = dot(r, pSun);
    float mumu = mu * mu;
    float gg = g * g;
    float pRlh = 3.0 / (16.0 * PI) * (1.0 + mumu);
    float pMie = 3.0 / (8.0 * PI) * ((1.0 - gg) * (mumu + 1.0)) / (pow(1.0 + gg - 2.0 * mu * g, 1.5) * (2.0 + gg));

    // Sample the primary ray.
    for (int i = 0; i < iSteps; i++) {

        // Calculate the primary ray sample position.
        vec3 iPos = r0 + r * (iTime + iStepSize * 0.5);

        // Calculate the height of the sample.
        float iHeight = length(iPos) - rPlanet;

        // Calculate the optical depth of the Rayleigh and Mie scattering for this step.
        float odStepRlh = exp(-iHeight / shRlh) * iStepSize;
        float odStepMie = exp(-iHeight / shMie) * iStepSize;

        // Accumulate optical depth.
        iOdRlh += odStepRlh;
        iOdMie += odStepMie;

        // Calculate the step size of the secondary ray.
        float jStepSize = RaySphereIntersect(iPos, pSun, rAtmos).y / float(jSteps);

        // Initialize the secondary ray time.
        float jTime = 0.0;

        // Initialize optical depth accumulators for the secondary ray.
        float jOdRlh = 0.0;
        float jOdMie = 0.0;

        // Sample the secondary ray.
        for (int j = 0; j < jSteps; j++) {

            // Calculate the secondary ray sample position.
            vec3 jPos = iPos + pSun * (jTime + jStepSize * 0.5);

            // Calculate the height of the sample.
            float jHeight = length(jPos) - rPlanet;

            // Accumulate the optical depth.
            jOdRlh += exp(-jHeight / shRlh) * jStepSize;
            jOdMie += exp(-jHeight / shMie) * jStepSize;

            // Increment the secondary ray time.
            jTime += jStepSize;
        }

        // Calculate attenuation.
        vec3 attn = exp(-(kMie * (iOdMie + jOdMie) + kRlh * (iOdRlh + jOdRlh)));

        // Accumulate scattering.
        totalRlh += odStepRlh * attn;
        totalMie += odStepMie * attn;

        // Increment the primary ray time.
        iTime += iStepSize;
    }

    // Calculate and return the final color.
    return iSun * (pRlh * kRlh * totalRlh + pMie * kMie * totalMie);
}

float Luminance(vec3 v)
{
    return dot(v, vec3(0.2126, 0.7152, 0.0722));
}

vec3 ReinhardJodie(vec3 v)
{
    float l = Luminance(v);
    vec3 tv = v / (1.0 + v);
    return mix(v / (1.0 + l), tv, tv);
}

void main() 
{
    vec3 dir = normalize( vs_out.vPosition ).xzy;
    float time = ( g_oUbo.g_flTime * 0.125 ) - 0.5;

    vec3 color = atmosphere(
        dir,                            // ray dir
        vec3(0,-6371000,0),             // ray origin
        g_oUbo.g_vSunPos,                      // position of the sun
        g_oUbo.g_flSunIntensity,
        g_oUbo.g_flPlanetRadius,
        g_oUbo.g_flAtmosphereRadius,
        8000,                           // Rayleigh scale height
        1200                            // Mie scale height
    );

    
    // color = color / (color + vec3(1.0, 1.0, 1.0));
    
    // Exposure
    // color = 1.0 - exp( -1.0 * color );

    // Gamma correct
    // color = pow(color, vec3(1.0/2.2));

    // Reinhard-Jodie tone mapping
    color = ReinhardJodie( color );
    color *= pow( 2, 0.5 );

    fragColor = vec4( color, 1 );
}
#endif
// ==========================================================================================================================