/*
 * ui.mshdr
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */

#pragma optionNV (unroll all)
//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout( set = 0, binding = 0 ) uniform texture2D g_tAtlas;
layout( set = 0, binding = 1 ) uniform sampler g_sSampler;
layout( set = 0, binding = 2 ) uniform ObjectUniformBuffer {
    vec3 vColor;
    float flTime;
} g_oUbo;

struct VS_OUT {
    vec3 vPositionPS;
    vec2 vTexCoords;
    vec3 vColor;
};

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 g_vPosition;
layout( location = 1 ) in vec2 g_vTexCoords;
layout( location = 2 ) in vec3 g_vColor;

//
// Out
//
layout( location = 0 ) out VS_OUT vs_out;

void main() {
    vec4 pos = vec4( g_vPosition.xy, 0.0, 1.0 );

    vs_out.vPositionPS = pos.xyz;
    vs_out.vTexCoords = g_vTexCoords;
    vs_out.vColor = g_vColor;
   
    gl_Position = pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in VS_OUT fs_in;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;

vec3 GetTextureSample( texture2D tex )
{
    return texture( sampler2D( tex, g_sSampler ), fs_in.vTexCoords ).xyz;
}

void main() 
{
    vec3 texSample = GetTextureSample( g_tAtlas );

    float r = texSample.r;
    float g = texSample.g;
    float b = texSample.b;
    
    float median = max(min(r, g), min(max(r, g), b));
    float signed_dist = median - 0.5;
    float d = fwidth(signed_dist);
    float opacity = smoothstep(-d, d, signed_dist);

    fragColor = vec4( fs_in.vColor, opacity );

    // if ( mod( g_oUbo.flTime, 2 ) == 0 )
    // {
    //     fragColor = vec4( fs_in.vTexCoords, 1, 1 );
    // }
}
#endif
// ==========================================================================================================================