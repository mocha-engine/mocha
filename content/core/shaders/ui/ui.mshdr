/*
 * ui.mshdr
 * Author: Alex
 * 
 * Copyright (c) 2022 Alex Guthrie
 */

#pragma optionNV (unroll all)
//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout( set = 0, binding = 0 ) uniform texture2D g_tAtlas;
layout( set = 0, binding = 1 ) uniform sampler g_sSampler;
layout( set = 0, binding = 2 ) uniform ObjectUniformBuffer {
    vec4 vSdfRange;
} g_oUbo;

struct VS_OUT {
    vec3 vPositionWS;
    vec3 vPositionPS;
    vec2 vTexCoords;
    vec4 vColor;
    float flScreenPxRange;
    vec2 vPanelPos;
    vec2 vPanelSize;
};

//
// Flags
//
// GraphicsFlags
const uint None        = 0;
const uint UseRawImage = 1;
const uint UseSdf      = 2;
const uint HighDistMul = 4;

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout( location = 0 ) in vec3 g_vPosition;
layout( location = 1 ) in vec2 g_vTexCoords;
layout( location = 2 ) in vec4 g_vColor;
layout( location = 3 ) in vec2 g_vPanelPos;
layout( location = 4 ) in vec2 g_vPanelSize;
layout( location = 5 ) in int g_flags;

#define g_flRounding 32

//
// Out
//
layout( location = 0 ) out VS_OUT vs_out;
layout( location = 8 ) flat out int vs_flags;

void main() {
    vec4 pos = vec4( g_vPosition.xy, 0.0, 1.0 );

    vs_out.vPositionWS = g_vPosition;
    vs_out.vPositionPS = pos.xyz;
    vs_out.vTexCoords = g_vTexCoords;
    vs_out.vColor = g_vColor;
    vs_out.vPanelPos = g_vPanelPos;
    vs_out.vPanelSize = g_vPanelSize;

    vs_flags = g_flags;
    gl_Position = pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout( location = 0 ) in VS_OUT fs_in;
layout( location = 8 ) flat in int fs_flags;

//
// Out
//
layout( location = 0 ) out vec4 fragColor;

vec4 GetTextureSample( texture2D tex )
{
    return texture( sampler2D( tex, g_sSampler ), fs_in.vTexCoords );
}

void main() 
{
    vec2 normalizedPanelPos = fs_in.vPanelPos / fs_in.vPanelSize;
    normalizedPanelPos *= vec2( 0.15686275, 0.13559322 );
    normalizedPanelPos += vec2( 0.15686275, 0 );

    float opacity = 1.0;
    vec4 texSample = GetTextureSample( g_tAtlas );

    if ( (fs_flags & UseRawImage) == UseRawImage )
    {
        fragColor = texSample;
    }
    else
    {
        if ( (fs_flags & UseSdf) == UseSdf )
        {
            float r = texSample.r;
            float g = texSample.g;
            float b = texSample.b;
            
            float median = max(min(r, g), min(max(r, g), b));
            float signed_dist = 1.0 * ( median - 0.5 );

            if ( (fs_flags & HighDistMul) == HighDistMul )
                signed_dist *= 3.0;

            opacity = clamp( signed_dist + 0.5, 0.0, 1.0 );
        }
        
        fragColor = vec4( fs_in.vColor.rgb, opacity * fs_in.vColor.a );
    }
}
#endif
// ==========================================================================================================================