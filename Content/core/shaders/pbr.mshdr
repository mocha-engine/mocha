// Common definitions
#define DEBUG_VIEW_NONE                     0
#define DEBUG_VIEW_DIFFUSE                  1
#define DEBUG_VIEW_NORMAL                   2
#define DEBUG_VIEW_AMBIENTOCCLUSION         3
#define DEBUG_VIEW_METALNESS                4
#define DEBUG_VIEW_ROUGHNESS                5
#define DEBUG_VIEW_OTHER                    63

struct FSInput
{
    float3 vColor;
    float3 vPositionWS;
    float3 vCameraWS;
    float2 vTexCoord;
    float3 vNormalWS;
    float4[4] vLightInfoTS;
    float3 vCameraTS;
    float3 vPositionTS;
    float3 vNormalTS;
    float3 vDebug;
    float3x3 mTBN;
};

struct PushConstantsStruct
{
    float4 data;
    float4x4 model_matrix;
    float4x4 render_matrix;
    float3 vCameraPosWS;
    float flTime;
    float4[4] vLightInfoWS;
};

ConstantBuffer<PushConstantsStruct> PushConstants;

// Textures and samplers
Texture2D diffuseTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D ambientOcclusionTexture : register(t2);
Texture2D metalnessTexture : register(t3);
Texture2D roughnessTexture : register(t4);
SamplerState textureSampler : register(s0);

// Vertex Shader
struct VSInput
{
    float3 vPosition : POSITION;
    float3 vNormal : NORMAL;
    float3 vColor : COLOR;
    float2 vTexCoord : TEXCOORD;
    float3 vTangent : TANGENT;
    float3 vBitangent : BITANGENT;
};

struct VSOutput
{
    FSInput fsInput;
    float4 Position : SV_Position;
};

VSOutput vsMain(VSInput input)
{
    VSOutput output;
    FSInput fsInput;

    // Basic params
    fsInput.vPositionWS = mul(PushConstants.model_matrix, float4(input.vPosition, 1.0f)).xyz;
    fsInput.vCameraWS = PushConstants.vCameraPosWS;
    fsInput.vColor = input.vColor;
    fsInput.vTexCoord = input.vTexCoord;
    fsInput.vNormalWS = input.vNormal;

    // Calculate TBN matrix for lighting
    float3 T = normalize(mul(PushConstants.model_matrix, float4(input.vTangent, 0.0)).xyz);
    float3 B = normalize(mul(PushConstants.model_matrix, float4(input.vBitangent, 0.0)).xyz);
    float3 N = normalize(mul(PushConstants.model_matrix, float4(input.vNormal, 0.0)).xyz);
    float3x3 TBN = transpose(float3x3(T, B, N));

    // Transform into tangent space
    for (int i = 0; i < 4; i++)
    {
        float3 lightPos = PushConstants.vLightInfoWS[i].xyz;
        lightPos = mul(TBN, lightPos);
        float lightIntensity = PushConstants.vLightInfoWS[i].w;
        fsInput.vLightInfoTS[i] = float4(lightPos, lightIntensity);
    }

    fsInput.vCameraTS = mul(TBN, fsInput.vCameraWS);
    fsInput.vPositionTS = mul(TBN, fsInput.vPositionWS);
    fsInput.vNormalTS = mul(TBN, fsInput.vNormalWS);
    fsInput.mTBN = TBN;

    fsInput.vDebug = fsInput.vPositionWS;

    // Transform into clip space
    output.Position = mul(PushConstants.render_matrix, float4(input.vPosition, 1.0f));
    output.fsInput = fsInput;

    return output;
}

// Fragment Shader
static const float PI = 3.14159265359;

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float num = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return num / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float3 calculateLighting(float roughness, float metallic, float3 albedo, float3 lightPos, float intensity, float3 V, float3 N, float3 positionTS)
{
    float3 L = normalize(lightPos - positionTS);
    float3 H = normalize(V + L);

    float distance = length(lightPos - positionTS);
    float attenuation = 1.0f / (distance * distance);
    float3 radiance = float3(1.0f, 1.0f, 1.0f) * attenuation * intensity;

    float3 F0 = float3(0.04, 0.04, 0.04);
    F0 = lerp(F0, albedo, metallic);

    float NDF = DistributionGGX(N, H, roughness);
    float G = GeometrySmith(N, V, L, roughness);
    float3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

    float3 kS = F;
    float3 kD = float3(1.0, 1.0, 1.0) - kS;
    kD *= 1.0 - metallic;

    float3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
    float3 specular = numerator / denominator;

    float NdotL = max(dot(N, L), 0.0);

    return (kD * albedo / PI + specular) * radiance * NdotL;
}

float ambient()
{
    return 0.05;
}

float3 sampleTexture(Texture2D tex, float2 uv)
{
    return tex.Sample(textureSampler, uv).rgb;
}

float3 sampleLod(Texture2D tex, float2 uv)
{
    return tex.SampleLevel(textureSampler, uv, 0).rgb;
}

float luminance(float3 v)
{
    return dot(v, float3(0.2126f, 0.7152f, 0.0722f));
}

float3 reinhard_jodie(float3 v)
{
    float l = luminance(v);
    float3 tv = v / (1.0f + v);
    return lerp(v / (1.0f + l), tv, tv);
}

float4 fsMain(VSOutput input) : SV_Target
{
    FSInput fsInput = input.fsInput;

    // Collect material properties
    float3 albedo = sampleTexture(diffuseTexture, fsInput.vTexCoord);
    float metallic = sampleTexture(metalnessTexture, fsInput.vTexCoord).r;
    float roughness = sampleTexture(roughnessTexture, fsInput.vTexCoord).r;
    float ao = sampleTexture(ambientOcclusionTexture, fsInput.vTexCoord).r;

    float3 vNormalTS = sampleLod(normalTexture, fsInput.vTexCoord);
    vNormalTS = normalize(vNormalTS * 2.0 - 1.0);

    float3 viewDir = normalize(fsInput.vCameraTS - fsInput.vPositionTS);

    float3 ambient = ambient() * albedo;
    float3 color = float3(0.0, 0.0, 0.0);

    for (int i = 0; i < 4; ++i)
    {
        // Unpack lighting info
        float3 vLightPosTS = fsInput.vLightInfoTS[i].xyz;
        float flLightIntensity = PushConstants.vLightInfoWS[i].w;

        color += calculateLighting(roughness, metallic, albedo, vLightPosTS, flLightIntensity, viewDir, vNormalTS, fsInput.vPositionTS);
    }

    float3 fragColor = ambient + color;

    // Ambient occlusion
    fragColor *= ao;

    // Gamma correction
    fragColor = pow(fragColor, float3(1.0f / 2.2f, 1.0f / 2.2f, 1.0f / 2.2f));

    // Tonemap
    fragColor = reinhard_jodie(fragColor);

    // Exposure
    fragColor *= 2.5f;

    int debugView = int(floor(PushConstants.data.x));

    if (debugView == DEBUG_VIEW_DIFFUSE)
        fragColor = albedo;
    else if (debugView == DEBUG_VIEW_NORMAL)
        fragColor = (vNormalTS + float3(1.0, 1.0, 1.0)) / float3(2.0, 2.0, 2.0);
    else if (debugView == DEBUG_VIEW_AMBIENTOCCLUSION)
        fragColor = float3(ao, ao, ao);
    else if (debugView == DEBUG_VIEW_METALNESS)
        fragColor = float3(metallic, metallic, metallic);
    else if (debugView == DEBUG_VIEW_ROUGHNESS)
        fragColor = float3(roughness, roughness, roughness);
    else if (debugView == DEBUG_VIEW_OTHER)
        fragColor = fsInput.vDebug;

    return float4(fragColor, 1.0f);
}